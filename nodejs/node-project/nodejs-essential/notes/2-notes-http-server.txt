# Création d'un nouveau serveur :
var Http = require('http');
- ajouter un handler pour le traitement des requêtes.
==> si pas de handler : le serveur démarre mais ne répond pas aux requêtes.
==> le handler de traitement prend en paramètre les objets : request et response.

- se mettre en écoute des requêtes.
==> /faveicon.ico
Tout browser, requête en plus de l'url qu'il traite, l'url faveicon.ico pour récupérer une image à afficher dans le browser.
==> Prendre en compte ce cas, avec un traitement spécifique ou via le mécanisme suivant:
-- https://github.com/expressjs/serve-favicon

Router :
-- router par uri
-- router par method

# Router et Middleware
##
1/ Faire le routing en fonction de l'url: request.getUrl.

2/ Faire le routing en fonction de la méthode: request.method (Post, Get, Delete, ...)
- router a une methode pour le mapping des routes.
- définir un handler pour chaque route.
==> possibilité de définir un handler spécifique pour une route.

# MIDDLE-WARE
- permet de faire des traitements globaux pour des différentes requêtes.
==> sont traités pour toutes les requêtes.
- les handlers peuvent être associés au middleware ou sur une route spécifique
- les handlers globaux doivent être déclarés devant les handlers spécifiques.

# Body-Parser
##
==> Permet de lire la requête comme un plain-text.